trigger:
- main

variables:
  # Azure Resource Manager connection
  azureServiceConnectionId: '786dd0be-c8fc-4796-be8b-b1158bc01e7d'

  # Azure Container Registry (ACR) name (without .azurecr.io)
  acrName: 'eliaregistry'

  # Web App name
  webAppName: 'elia-api'

  # Container Image name
  imageName: 'elia-api'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'elia-api'

  # Project root folder
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: PushDockerImage
  displayName: Push Docker Image to Azure Container Registry
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: PushToACR
    displayName: Push Docker Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        azureSubscription: $(azureServiceConnectionId)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    - script: |
        docker build -t $(acrName).azurecr.io/$(imageName):$(Build.BuildId) .
        docker tag $(acrName).azurecr.io/$(imageName):$(Build.BuildId) $(acrName).azurecr.io/$(imageName):latest
        docker push $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
        docker push $(acrName).azurecr.io/$(imageName):latest
      displayName: 'Build and Push Docker Image with latest tag'

    - script: |
        echo "##vso[task.setvariable variable=imageTag;]$(Build.BuildId)"
      displayName: 'Set imageTag variable for deployment'

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: PushDockerImage
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : elia-api'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
